#! /usr/bin/env python

import os
import sys
import itertools
from os.path import join as pjoin

import numpy as np
import nibabel as nib

from dipy.fixes import argparse

from dipy.segment.clustering import outlier_rejection

from dipy.data import fetch_viz_icons
fetch_viz_icons()


def build_args_parser():
    description = "Detect tractography outliers in a tractogram."
    p = argparse.ArgumentParser(description=description)

    p.add_argument("tractogram", help="File containing streamlines (.trk).")

    p.add_argument("--threshold", type=float, default=0,
                   help="Reject streamlines having an outlierness score above this threshold (%%)."
                        "Default: set manually through an interactive display.")

    p.add_argument("--out", default="./outliers/",
                   help="Output dir where to save all the files. Default: './outliers/'")

    p.add_argument("--inliers", help="Filename where to save tractography intliers (.trk)."
                   "Default: append '_inliers' to the tractogram filename")
    p.add_argument("--outliers", help="Filename where to save tractography outliers (.trk)."
                   "Default: append '_outliers' to the tractogram filename")
    p.add_argument("--outlierness", help="Filename where to save the outlierness scores (.csv).")
    p.add_argument("--histogram", help="Filename where to save the histogram (.png).")

    p.add_argument("--confidence_level", type=float, default=0.95,
                   help="Confidence level controlling the number of orderings. Default: 0.95")

    p.add_argument("--seed", type=int, default=1234, help="Seed used to shuffle orderings. Default: 1234")
    p.add_argument('-v', "--verbose", action="store_true",
                   help="Enable verbose mode.")

    return p


def load_tractogram(filename):
    streams, hdr = nib.trackvis.read(filename)
    streamlines, colors, properties = zip(*streams)
    return streamlines, colors, properties, hdr


def save_tractogram(filename, streamlines, colors, properties, hdr):
    data = itertools.izip_longest(streamlines, colors, properties)
    nib.trackvis.write(filename.split(".trk")[0] + ".trk", data, hdr)


def append_text_to_filename(filename, text):
    path, ext = os.path.splitext(filename)
    return path + text + ext


def create_hist(outlierness, colormap_name="jet"):
    import pylab as plt
    # Make histogram plot prettier.
    plt.rcParams['font.size'] = 24
    #plt.rcParams['font.weight'] = "bold"
    fig = plt.figure(dpi=300)
    ax = fig.add_subplot(111)
    ax.set_title('Outlierness', fontsize="32", fontweight="bold")
    n, bins, patches = ax.hist(outlierness, bins=np.linspace(0, 1, 101), linewidth=0.2)

    # Apply colormap to histogram.
    cm = plt.cm.get_cmap(colormap_name)
    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    # scale values to interval [0,1]
    col = bin_centers - min(bin_centers)
    col /= max(col)

    for c, p in zip(col, patches):
        plt.setp(p, 'facecolor', cm(c))

    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    return fig


def create_hist_actor(outlierness, colormap_name="jet"):
    import vtk
    from dipy.viz import actor, utils

    import pylab as plt
    if not hasattr(plt, 'style'):
        print "Use Matplotlib >= 1.4 to have better colormap."
    else:
        plt.style.use('dark_background')

    fig = create_hist(outlierness, colormap_name)
    arr = utils.matplotlib_figure_to_numpy(fig, dpi=300, transparent=False)
    figure_actor = actor.figure(arr, size=100, interpolation='linear')

    # Make sure the figure is center is in the middle of the image.
    transform = vtk.vtkTransform()
    transform.Translate(-np.array(figure_actor.GetCenter()))
    figure_actor.SetUserMatrix(transform.GetMatrix())
    return figure_actor, fig


def interactive_outlier_rejection(streamlines, outlierness, tractogram_filename, hdr):
    import vtk
    from dipy.viz import fvtk, actor, window, widget
    from dipy.data.fetcher import read_viz_icons

    colormap_name = "jet"
    stream_actor = actor.line(streamlines, colors=fvtk.create_colormap(outlierness, name=colormap_name))
    stream_actor.SetPosition(-np.array(stream_actor.GetCenter()))

    global threshold
    threshold = 0.4

    streamlines_color = np.zeros(len(streamlines), dtype="float32")
    streamlines_color[outlierness < threshold] = 1
    streamlines_color[outlierness >= threshold] = 0

    lut = vtk.vtkLookupTable()
    lut.SetNumberOfTableValues(2)
    lut.Build()
    lut.SetTableValue(0, tuple(fvtk.colors.orange_red) + (1,))
    lut.SetTableValue(1, tuple(fvtk.colors.green) + (1,))
    lut.SetTableRange(0, 1)

    stream_split_actor = actor.line(streamlines, colors=streamlines_color, lookup_colormap=lut)
    stream_split_actor.SetPosition(-np.array(stream_split_actor.GetCenter()))
    hist_actor, hist_fig = create_hist_actor(outlierness, colormap_name=colormap_name)

    bg = (0, 0, 0)
    global screen_size
    screen_size = (0, 0)
    default_ren = window.Renderer()
    default_ren.background(bg)
    show_m = window.ShowManager(default_ren, size=(1200, 900), interactor_style="trackball")

    main_ren = window.Renderer()
    show_m.window.AddRenderer(main_ren)
    main_ren.background(bg)
    main_ren.SetViewport(0, 0, 0.7, 1)
    main_ren.add(stream_split_actor)
    main_ren.reset_camera_tight()

    # Create another renderer for the histogram
    ren_hist = window.Renderer()
    show_m.window.AddRenderer(ren_hist)
    ren_hist.projection("parallel")
    ren_hist.background(bg)
    ren_hist.SetViewport(0.7, 0.6, 1, 1)
    ren_hist.add(hist_actor)
    ren_hist.reset_camera_tight(margin_factor=0.85)
    ren_hist.SetInteractive(False)

    # Create another renderer for the threshold slider
    ren_threshold = window.Renderer()
    show_m.window.AddRenderer(ren_threshold)
    ren_threshold.background(bg)
    ren_threshold.SetViewport(0.7, 0.4, 1, 0.6)

    def apply_threshold(obj, evt):
        global threshold
        new_threshold = np.round(obj.GetSliderRepresentation().GetValue(), decimals=2)
        obj.GetSliderRepresentation().SetValue(new_threshold)
        if threshold != new_threshold:
            threshold = new_threshold

            streamlines_color = np.zeros(len(streamlines), dtype=np.float32)
            streamlines_color[outlierness < threshold] = 1
            streamlines_color[outlierness >= threshold] = 0

            colors = []
            for color, streamline in zip(streamlines_color, streamlines):
                colors += [color] * len(streamline)

            scalars = stream_split_actor.GetMapper().GetInput().GetPointData().GetScalars()
            for i, c in enumerate(colors):
                scalars.SetValue(i, c)

            scalars.Modified()

    threshold_slider_rep = vtk.vtkSliderRepresentation3D()
    threshold_slider_rep.SetMinimumValue(0.)
    threshold_slider_rep.SetMaximumValue(1.)
    threshold_slider_rep.SetValue(threshold)
    threshold_slider_rep.SetTitleText("Threshold")
    threshold_slider_rep.SetTitleHeight(0.05)
    threshold_slider_rep.SetLabelFormat("%0.2lf")
    threshold_slider_rep.SetLabelHeight(0.05)
    threshold_slider_rep.GetPoint1Coordinate().SetCoordinateSystemToWorld()
    threshold_slider_rep.GetPoint1Coordinate().SetValue(-10, 0, 0)
    threshold_slider_rep.GetPoint2Coordinate().SetCoordinateSystemToWorld()
    threshold_slider_rep.GetPoint2Coordinate().SetValue(10, 0, 0)
    threshold_slider_rep.SetSliderLength(0.075)
    threshold_slider_rep.SetSliderWidth(0.05)
    threshold_slider_rep.SetEndCapLength(0.05)

    threshold_slider = vtk.vtkSliderWidget()
    threshold_slider.SetInteractor(show_m.iren)
    threshold_slider.SetRepresentation(threshold_slider_rep)
    threshold_slider.SetCurrentRenderer(ren_threshold)
    threshold_slider.SetAnimationModeToAnimate()
    threshold_slider.SetNumberOfAnimationSteps(100)
    threshold_slider.EnabledOn()

    threshold_slider.AddObserver("InteractionEvent", apply_threshold)

    ren_threshold.add(threshold_slider_rep)
    ren_threshold.reset_camera_tight(margin_factor=0.85)
    ren_threshold.SetInteractive(False)

    # Create another renderer for the outlierness
    ren_outlierness = window.Renderer()
    show_m.window.AddRenderer(ren_outlierness)
    ren_outlierness.background(bg)
    ren_outlierness.SetViewport(0.7, 0, 1, 0.4)
    ren_outlierness.add(stream_actor)
    ren_outlierness.reset_camera_tight(margin_factor=0.8)

    # Add a save button.
    def button_save_callback(obj, event):
        inliers = [s for s, keep in zip(streamlines, outlierness < threshold) if keep]
        outliers = [s for s, keep in zip(streamlines, outlierness >= threshold) if keep]

        ftypes = (("Trackvis file", "*.trk"), ("All Files", "*.*"))

        inliers_filename = append_text_to_filename(tractogram_filename, "_inliers")
        filename = window.save_file_dialog(initial_file=inliers_filename,
                                           default_ext='.trk',
                                           file_types=ftypes,
                                           title="Saving inliers")

        if filename != '':
            save_tractogram(filename, inliers, [], [], hdr)
            print('Inliers saved in: ' + filename)

        outliers_filename = append_text_to_filename(tractogram_filename, "_outliers")
        filename = window.save_file_dialog(initial_file=outliers_filename,
                                           default_ext='.trk',
                                           file_types=ftypes,
                                           title="Saving outliers")

        if filename != '':
            save_tractogram(filename, outliers, [], [], hdr)
            print('Outliers saved in: ' + filename)

        # Save outlierness in a csv file.
        ftypes = (("CSV", "*.csv"), ("All Files", "*.*"))
        outliersness_filename = append_text_to_filename(tractogram_filename, "_outlierness")
        filename = window.save_file_dialog(initial_file=os.path.splitext(outliersness_filename)[0] + ".csv",
                                           default_ext='.csv',
                                           file_types=ftypes,
                                           title="Saving outlierness scores")

        if filename != '':
            np.savetxt(filename, outlierness, delimiter=",")
            print('Outlierness scores saved in: ' + filename)

        # Save snapshot of the histogram
        ftypes = (("PNG", "*.png"), ("All Files", "*.*"))
        hist_filename = append_text_to_filename(tractogram_filename, "_hist")
        filename = window.save_file_dialog(initial_file=os.path.splitext(hist_filename)[0] + ".png",
                                           default_ext='.png',
                                           file_types=ftypes,
                                           title="Saving histogram")

        if filename != '':
            hist_fig.savefig(filename, dpi=300, transparent=False, bbox_inches='tight', pad_inches=0.)
            print('Histogram saved in: ' + filename)

    # Add a saveall button.
    def button_saveall_callback(obj, event):
        inliers = [s for s, keep in zip(streamlines, outlierness < threshold) if keep]
        outliers = [s for s, keep in zip(streamlines, outlierness >= threshold) if keep]

        folder = window.ask_folder_dialog(initial_folder=os.path.dirname(tractogram_filename))

        if folder != '':
            try:
                os.makedirs(folder)
            except OSError:
                pass

            filename = pjoin(folder, "inliers.trk")
            save_tractogram(filename, inliers, [], [], hdr)
            print('Inliers saved in: ' + filename)

            filename = pjoin(folder, "outliers.trk")
            save_tractogram(filename, outliers, [], [], hdr)
            print('Outliers saved in: ' + filename)

            filename = pjoin(folder, "outlierness.csv")
            np.savetxt(filename, outlierness, delimiter=",")
            print('Outlierness scores saved in: ' + filename)

            filename = pjoin(folder, "histogram.png")
            hist_fig.savefig(filename, dpi=300, transparent=False, bbox_inches='tight', pad_inches=0.)
            print('Histogram saved in: ' + filename)

    button_png = read_viz_icons(fname='floppy-disk.png')
    save_button = widget.button(show_m.iren, main_ren,
                                button_save_callback,
                                button_png, (.05, .98), (50, 50))

    button_png = read_viz_icons(fname='folder.png')
    save_all_button = widget.button(show_m.iren, main_ren,
                                    button_saveall_callback,
                                    button_png, (.05, .88), (50, 50))

    def _window_callback(obj, event):
        global screen_size
        #if screen_size != obj.GetSize():
        ren_hist.reset_camera_tight()
        save_button.place(main_ren)
        save_all_button.place(main_ren)
        screen_size = obj.GetSize()

    show_m.add_window_callback(_window_callback)
    show_m.initialize()
    show_m.render()
    show_m.start()

    inliers = [s for s, keep in zip(streamlines, outlierness < threshold) if keep]
    outliers = [s for s, keep in zip(streamlines, outlierness >= threshold) if keep]
    return inliers, outliers


def main():
    parser = build_args_parser()
    args = parser.parse_args()

    streamlines, colors, properties, hdr = load_tractogram(args.tractogram)

    inliers, outliers, outlierness = outlier_rejection(streamlines, threshold=args.threshold,
                                                       confidence=args.confidence_level, seed=args.seed,
                                                       return_outlierness=True, verbose=args.verbose)

    if args.threshold == 0.:
        inliers, outliers = interactive_outlier_rejection(streamlines, outlierness, args.tractogram, hdr)
        return

    # Create output folder, if needed.
    try:
        os.mkdir(args.out)
    except OSError:
        pass

    # Save results
    if args.outlierness is not None:
        np.savetxt(pjoin(args.out, args.outlierness.split(".csv")[0] + ".csv"), outlierness, delimiter=",")

    if args.histogram is not None:
        fig = create_hist(outlierness, colormap_name="jet")
        fig.savefig(pjoin(args.out, args.histogram.split(".png")[0] + ".png"), dpi=300, transparent=False, bbox_inches='tight', pad_inches=0.)

    inliers_filename = args.inliers
    if args.inliers is None:
        inliers_filename = append_text_to_filename(args.tractogram, "_inliers")

    save_tractogram(pjoin(args.out, inliers_filename), inliers, [], [], hdr)

    outliers_filename = args.outliers
    if args.outliers is None:
        outliers_filename = append_text_to_filename(args.tractogram, "_outliers")

    save_tractogram(pjoin(args.out, outliers_filename), outliers, [], [], hdr)


if __name__ == "__main__":
    main()
